/**
 * Gosha Bot - Telegram –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Å–µ–Ω —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏
 */

// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');
const winston = require('winston');
const { exec } = require('child_process');
const path = require('path');

// –ö–û–ù–°–¢–ê–ù–¢–´
const MAX_MESSAGE_LENGTH = 4000; // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –ø–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (4096)

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'debug',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.colorize(),
    winston.format.printf(({ timestamp, level, message, ...metadata }) => {
      let msg = `${timestamp} [${level}] : ${message}`;
      if (Object.keys(metadata).length > 0) {
        msg += JSON.stringify(metadata, null, 2);
      }
      return msg;
    })
  ),
  transports: [
    new winston.transports.File({ 
      filename: 'error.log', 
      level: 'error',
      maxsize: 5242880, // 5MB
      maxFiles: 5,
    }),
    new winston.transports.File({ 
      filename: 'combined.log',
      maxsize: 5242880, // 5MB
      maxFiles: 5,
    }),
    new winston.transports.Console({
      format: winston.format.combine(
        winston.format.colorize(),
        winston.format.simple()
      )
    })
  ]
});

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
 */
const app = express();
app.use(express.json());

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  logger.debug('Incoming request:', {
    method: req.method,
    path: req.path,
    body: req.body,
    headers: req.headers
  });
  next();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∫–µ—à–µ–π
const userStates = new Map();
const userSongCache = new Map();
const lastSongPageMap = new Map();
const docCache = {
  content: null,
  lastUpdate: null,
  updateInterval: 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
const stats = {
  searches: 0,
  commands: 0,
  songViews: {},
  commandsUsed: {},
  callbacksUsed: {},
  userActivity: {},
  lastReset: Date.now()
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API
 */
let auth;
try {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
  const credentialsPath = path.join(__dirname, '..', 'Gosha IAM Admin.json');
  
  if (require('fs').existsSync(credentialsPath)) {
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google API');
    logger.info(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${credentialsPath}`);
    
    auth = new google.auth.GoogleAuth({
      keyFile: credentialsPath,
      scopes: ['https://www.googleapis.com/auth/documents.readonly']
    });
  } else if (process.env.GOOGLE_SERVICE_ACCOUNT_B64) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64 –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    console.log('‚ö†Ô∏è –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_SERVICE_ACCOUNT_B64');
    logger.info('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_SERVICE_ACCOUNT_B64');
    
    let credentials;
    try {
      const decodedCredentials = Buffer.from(process.env.GOOGLE_SERVICE_ACCOUNT_B64, 'base64').toString('utf-8');
      credentials = JSON.parse(decodedCredentials);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —Å–∏–º–≤–æ–ª–∞ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
      if (credentials.private_key && credentials.private_key.indexOf('\\n') !== -1) {
        credentials.private_key = credentials.private_key.replace(/\\n/g, '\n');
      }
      
      auth = new google.auth.GoogleAuth({
        credentials,
        scopes: ['https://www.googleapis.com/auth/documents.readonly']
      });
    } catch (err) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ GOOGLE_SERVICE_ACCOUNT_B64:', {
        error: err.message,
        stack: err.stack
      });
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GOOGLE_SERVICE_ACCOUNT_B64: ${err.message}`);
    }
  } else {
    // –ï—Å–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    console.warn('–í–ù–ò–ú–ê–ù–ò–ï: –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
    logger.warn('–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Docs.');
    throw new Error('–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
  }
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API: ${error.message}`);
  logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google API:', {
    error: error.message,
    stack: error.stack
  });
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
  auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/documents.readonly']
  });
}

const docs = google.docs({ version: 'v1', auth });

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
 */
const isDev = process.env.NODE_ENV === 'development';
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: false });

// –û–±—â–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('webhook_error', (error) => {
  logger.error('Webhook error:', error);
});

bot.on('error', (error) => {
  logger.error('Bot error:', error);
});

bot.on('polling_error', (error) => {
  logger.error('Polling error:', error);
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, handleStartCommand);
bot.onText(/\/help/, handleHelpCommand);
bot.onText(/\/list/, handleListCommand);
bot.onText(/\/random/, handleRandomCommand);
bot.onText(/\/search(?:\s+(.+))?/, handleSearchCommand);
bot.onText(/\/text(?:\s+(.+))?/, handleTextCommand);

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (msg.text && msg.text.startsWith('/')) return;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (msg.text) {
    handleTextMessage(msg);
  }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', handleCallbackQuery);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ callback-–∫–Ω–æ–ø–æ–∫
stats.commandsUsed = {};
stats.callbacksUsed = {};
stats.userActivity = {};
stats.songViews = {};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
function checkRequiredEnvVariables() {
  const required = ['BOT_TOKEN', 'SONGBOOK_URL'];
  const missing = required.filter(key => !process.env[key]);
  
  if (missing.length > 0) {
    console.error(`–û–®–ò–ë–ö–ê: –°–ª–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${missing.join(', ')}`);
    console.error('–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑ —ç—Ç–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env');
    logger.error(`Missing required environment variables: ${missing.join(', ')}`);
    return false;
  }
  
  return true;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async function initializeBot() {
  try {
    console.log('');
    console.log('=====================================');
    console.log('        üé∏ Gosha Bot –ó–∞–ø—É—Å–∫ üéµ       ');
    console.log('=====================================');
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!checkRequiredEnvVariables()) {
      return;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Express-—Å–µ—Ä–≤–µ—Ä
    const PORT = process.env.PORT || 3333;
    const server = app.listen(PORT, () => {
      logger.info(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.on('error', (error) => {
      if (error.code === 'EADDRINUSE') {
        logger.error(`–ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç.`);
        console.error(`‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –≤ .env —Ñ–∞–π–ª–µ.`);
      } else {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', {
          error: error.message,
          stack: error.stack
        });
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
      }
    });
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞
    try {
      if (!process.env.BOT_TOKEN) {
        throw new Error('BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
      if (isDev) {
        logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ (polling)');
        console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ (polling)');
        bot.startPolling();
      } else {
        logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook');
        console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook');
        await setupWebhook();
      }
      
      console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞:', {
        error: error.message,
        stack: error.stack
      });
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞:', error.message);
      return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Google Docs
    try {
      logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Docs...');
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Docs...');
      
      const document = await getDocumentContent();
      
      if (!document || !document.body || !document.body.content) {
        logger.error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ');
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
        console.error('‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Google Docs, –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å');
        return;
      }
      
      const titleCount = document.body.content.filter(item => 
        item && item.paragraph && 
        item.paragraph.paragraphStyle && 
        item.paragraph.paragraphStyle.namedStyleType === 'TITLE'
      ).length;
      
      logger.info(`–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Docs. –ù–∞–π–¥–µ–Ω–æ ${titleCount} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.`);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Docs. –ù–∞–π–¥–µ–Ω–æ ${titleCount} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤`);
      console.log('');
      console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
      console.log('');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Docs –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', {
        error: error.message,
        url: process.env.SONGBOOK_URL || '–Ω–µ –∑–∞–¥–∞–Ω'
      });
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Docs:', error.message);
      console.error('‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å Google Docs, –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å');
      console.log('');
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', {
      error: error.message,
      stack: error.stack
    });
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
initializeBot();

/**
 * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
 */

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ URL Google Docs
 * @param {string} url - URL –¥–æ–∫—É–º–µ–Ω—Ç–∞ Google Docs
 * @returns {string} - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
function getDocumentIdFromUrl(url) {
  if (!url) {
    throw new Error('URL –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
  }
  
  if (url.includes('/d/')) {
    // –§–æ—Ä–º–∞—Ç: https://docs.google.com/document/d/DOCUMENT_ID/edit
    return url.split('/d/')[1].split('/')[0];
  } else if (url.includes('?id=')) {
    // –§–æ—Ä–º–∞—Ç: https://docs.google.com/document/edit?id=DOCUMENT_ID
    return url.split('?id=')[1].split('&')[0];
  } else if (url.match(/^[a-zA-Z0-9_-]{25,}$/)) {
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
    return url;
  } else {
    throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${url}`);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @returns {Promise<Object>} - –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç Google API
 */
async function getDocumentContent() {
  try {
    const now = Date.now();
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç—É–∞–ª–µ–Ω
    if (docCache.content && docCache.lastUpdate && (now - docCache.lastUpdate < docCache.updateInterval)) {
      logger.debug('Using cached document content');
      return docCache.content;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if (!process.env.SONGBOOK_URL) {
      logger.error('SONGBOOK_URL is not set in environment variables');
      throw new Error('SONGBOOK_URL is not configured');
    }

    logger.info('Fetching fresh document content');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ URL
    const url = process.env.SONGBOOK_URL;
    const documentId = getDocumentIdFromUrl(url);
    
    logger.debug(`–ò–∑–≤–ª–µ—á–µ–Ω ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${documentId} –∏–∑ URL: ${url}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    if (!process.env.GOOGLE_SERVICE_ACCOUNT && !process.env.GOOGLE_SERVICE_ACCOUNT_B64) {
      logger.error('Google service account credentials not provided');
      throw new Error('Missing Google service account credentials');
    }
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Google API
    logger.debug('Making API request to Google Docs', {
      documentId,
      serviceAccountType: process.env.GOOGLE_SERVICE_ACCOUNT_B64 ? 'Base64 encoded' : 'JSON'
    });
    
    const document = await docs.documents.get({
      documentId: documentId
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
    if (!document || !document.data) {
      logger.error('Google API returned empty document', {
        responseStatus: document ? document.status : 'undefined',
        documentId
      });
      throw new Error('Empty document received from Google API');
    }
    
    logger.debug('Document received from Google API', { 
      documentTitle: document.data.title,
      hasContent: document.data.body && document.data.body.content ? 'yes' : 'no',
      contentLength: document.data.body && document.data.body.content ? document.data.body.content.length : 0
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    docCache.content = document.data;
    docCache.lastUpdate = now;
    logger.debug('Document content updated successfully');
    return document.data;
  } catch (error) {
    logger.error('Error fetching document content:', {
      error: error.message,
      stack: error.stack,
      url: process.env.SONGBOOK_URL || 'not set',
      apiError: error.response ? JSON.stringify(error.response.data) : 'No API response'
    });
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Å–Ω–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {string} documentId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ Google Docs
 * @param {number} pageNumber - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã/–ø–µ—Å–Ω–∏
 * @returns {Promise<string|null>} - –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function getSongContent(documentId, pageNumber) {
  try {
    const document = await getDocumentContent();
    
    if (!document || !document.body || !document.body.content) {
      logger.error('Document structure is invalid for getSongContent');
      throw new Error('Invalid document structure');
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞)
    let currentPage = 2;
    let foundSong = false;
    let title = '';
    let paragraphContent = [];
    
    for (const element of document.body.content) {
      if (element && element.paragraph) {
        const paragraphStyle = element.paragraph.paragraphStyle;
        const paragraphElements = element.paragraph.elements;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏)
        if (paragraphStyle && paragraphStyle.namedStyleType === 'TITLE' && paragraphElements && paragraphElements[0]) {
          // –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –ø–µ—Å–Ω—é –∏ –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, 
          // –∑–Ω–∞—á–∏—Ç –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Å–Ω–∏ –∏ –º–æ–∂–µ–º –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ —Ü–∏–∫–ª–∞
          if (foundSong) {
            break;
          }
          
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–∞—è –Ω–∞–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
          if (currentPage === pageNumber) {
            foundSong = true;
            const titleText = paragraphElements[0].textRun ? paragraphElements[0].textRun.content.trim() : '';
            title = titleText;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            paragraphContent.push({
              type: 'title',
              text: titleText
            });
          }
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∫–∞–∂–¥–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ
          currentPage++;
        } 
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –º—ã —É–∂–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –ø–µ—Å–Ω—é
        else if (foundSong && paragraphElements) {
          let isParagraphHeader = false;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ –ø–µ—Å–Ω–∏
          const headerKeywords = ['–ø—Ä–∏–ø–µ–≤', 'chorus', '–∫—É–ø–ª–µ—Ç', 'verse', '–±—Ä–∏–¥–∂', 'bridge'];
          let paragraphText = '';
          
          // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
          for (const paraElement of paragraphElements) {
            if (paraElement.textRun) {
              paragraphText += paraElement.textRun.content;
            }
          }
          
          paragraphText = paragraphText.trim();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–∏–ø–µ–≤:", "Chorus:" –∏ —Ç.–¥.)
          for (const keyword of headerKeywords) {
            if (paragraphText.toLowerCase().includes(keyword.toLowerCase() + ':') || 
                paragraphText.toLowerCase().includes(keyword.toLowerCase() + '.')) {
              isParagraphHeader = true;
              break;
            }
          }
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
          if (isParagraphHeader) {
            paragraphContent.push({
              type: 'header',
              text: paragraphText
            });
          } else if (paragraphText.trim() !== '') {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
            paragraphContent.push({
              type: 'text',
              text: paragraphText
            });
          }
        }
      }
    }
    
    // –ï—Å–ª–∏ –ø–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (!foundSong) {
      logger.error(`Song with page number ${pageNumber} not found`);
      throw new Error(`Song with page number ${pageNumber} not found`);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Å–Ω–∏ –≤ —Ç–µ–∫—Å—Ç
    const songText = formatSongTextStructure(paragraphContent);
    
    // –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    stats.songViews[title] = (stats.songViews[title] || 0) + 1;
    
    return songText;
  } catch (error) {
    logger.error('Error getting song content:', {
      error: error.message,
      documentId,
      pageNumber
    });
    return null;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–µ—Å–Ω—é –≤ —Ç–µ–∫—Å—Ç
 * @param {Array} paragraphs - –ú–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ —Å —Ç–∏–ø–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
 */
function formatSongTextStructure(paragraphs) {
  if (!paragraphs || paragraphs.length === 0) return '';
  
  let result = '';
  let currentSection = null;
  
  for (let i = 0; i < paragraphs.length; i++) {
    const para = paragraphs[i];
    
    if (para.type === 'title') {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
      result += para.text + '\n\n';
      currentSection = 'title';
    } 
    else if (para.type === 'header') {
      // –ü–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∫—É–ø–ª–µ—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      if (currentSection && currentSection !== 'title') {
        result += '\n';
      }
      result += para.text + '\n';
      currentSection = 'header';
    } 
    else if (para.type === 'text') {
      // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
      result += para.text + '\n';
      currentSection = 'text';
    }
  }
  
  return result.trim();
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} text - –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
 * @returns {string} - –¢–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ HTML-—Å–∏–º–≤–æ–ª–∞–º–∏
 */
function formatSongForDisplay(text) {
  if (!text) return '';
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏
 * @param {string} text - –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Å–Ω–∏
 */
function extractSongInfo(text) {
  const info = {
    author: null,
    rhythm: null,
    notes: null,
    cleanText: ''
  };
  
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  if (!text) return info;
  
  const lines = text.split('\n');
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  const authorRegexes = [
    /^(–ê–≤—Ç–æ—Ä|–ú—É–∑—ã–∫–∞|–°–ª–æ–≤–∞|–ú—É–∑\.|–°–ª\.|–ê–≤—Ç–æ—Ä –∏ –º—É–∑—ã–∫–∞)[:\s]+(.+)$/i,
    /^(–°–ª–æ–≤–∞ –∏ –º—É–∑—ã–∫–∞)[:\s]+(.+)$/i,
    /^.*?(–∞–≤—Ç–æ—Ä|–º—É–∑—ã–∫–∞)[:\s]+([^,]+).*/i
  ];
  
  const rhythmRegexes = [
    /^(–†–∏—Ç–º|–†–∏—Ç–º–∏–∫–∞|–ë–æ–π)[:\s]+(.+)$/i,
    /^.*?(—Ä–∏—Ç–º|—Ä–∏—Ç–º–∏–∫–∞)[:\s]+([^,]+).*/i,
    /^(–°–ª–æ–∂–Ω—ã–π –±–æ–π|–ü—Ä–æ—Å—Ç–æ–π –±–æ–π|–ü–µ—Ä–µ–±–æ—Ä)$/i
  ];
  
  const notesRegexes = [
    /^(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ|Note|–ü—Ä–∏–º–µ—á\.)[:\s]+(.+)$/i,
    /^.*?(–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ)[:\s]+([^,]+).*/i
  ];
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "–°–ª–æ–≤–∞ –∏ –º—É–∑—ã–∫–∞" –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞
  const titleAuthorRegex = /^(.+)\s+\((.+)\)$/;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
  const songLines = [];
  let inMetaSection = true;
  let skipFirstLine = true; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, —Ç.–∫. —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–Ω–∞–∑–≤–∞–Ω–∏–µ)
    if (skipFirstLine) {
      skipFirstLine = false;
      continue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º "–ù–∞–∑–≤–∞–Ω–∏–µ (–ê–≤—Ç–æ—Ä)"
    if (i === 0 && titleAuthorRegex.test(line)) {
      const match = line.match(titleAuthorRegex);
      if (match && match[2]) {
        info.author = match[2].trim();
      }
      continue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∞–≤—Ç–æ—Ä–∞
    let isAuthor = false;
    for (const regex of authorRegexes) {
      const match = line.match(regex);
      if (match && match[2]) {
        info.author = match[2].trim();
        isAuthor = true;
        break;
      }
    }
    if (isAuthor) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Ä–∏—Ç–º–∞
    let isRhythm = false;
    for (const regex of rhythmRegexes) {
      const match = line.match(regex);
      if (match) {
        if (match[2]) {
          info.rhythm = match[2].trim();
        } else if (match[1]) {
          info.rhythm = match[1].trim();
        }
        isRhythm = true;
        break;
      }
    }
    if (isRhythm) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
    let isNote = false;
    for (const regex of notesRegexes) {
      const match = line.match(regex);
      if (match && match[2]) {
        info.notes = match[2].trim();
        isNote = true;
        break;
      }
    }
    if (isNote) continue;
    
    // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –ø–µ—Å–Ω–∏ –ø–æ—Å–ª–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, 
    // –∑–Ω–∞—á–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    if (inMetaSection && line) {
      inMetaSection = false;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
    songLines.push(lines[i]);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–µ –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
  if (!info.author) {
    // –ò—â–µ–º –≤–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
    for (let i = 0; i < Math.min(5, songLines.length); i++) {
      const line = songLines[i].trim();
      
      // –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ "–ê–≤—Ç–æ—Ä: –Æ. –£—Å—Ç–∏–Ω–æ–≤–∞" –∏–ª–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
      for (const regex of authorRegexes) {
        const match = line.match(regex);
        if (match && match[2]) {
          info.author = match[2].trim();
          // –£–¥–∞–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏
          songLines.splice(i, 1);
          break;
        }
      }
      
      if (info.author) break;
    }
  }
  
  // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  info.cleanText = songLines.join('\n');
  return info;
}

/**
 * –ü–æ–∏—Å–∫ –ø–µ—Å–µ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–∫—Å—Ç—É
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {boolean} searchByText - –§–ª–∞–≥ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (–µ—Å–ª–∏ false - –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
 * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω
 */
async function searchSongs(query, searchByText = false) {
  try {
    const document = await getDocumentContent();
    
    if (!document || !document.body || !document.body.content) {
      logger.error('Document structure is invalid for searchSongs');
      throw new Error('Invalid document structure');
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ TITLE —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    const titleElements = document.body.content.filter(item => 
      item && item.paragraph && 
      item.paragraph.paragraphStyle && 
      item.paragraph.paragraphStyle.namedStyleType === 'TITLE' &&
      item.paragraph.elements && 
      item.paragraph.elements[0] && 
      item.paragraph.elements[0].textRun
    );
    
    if (titleElements.length <= 1) {
      logger.warn('–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Å–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞');
      return [];
    }
    
    // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø—Ä–∞–≤–∏–ª–∞) –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–≥–æ
    const foundTitles = [];
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞ 1 (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç)
    for (let i = 1; i < titleElements.length; i++) {
      const title = titleElements[i].paragraph.elements[0].textRun.content.trim();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –Ω–µ –ø–µ—Å–Ω–∏
      if (title && 
          !title.includes('–ü—Ä–∞–≤–∏–ª–∞') &&
          !title.match(/^\d+\./) && // –ù–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞ –∏ —Ç–æ—á–∫–∏ (–ø—Ä–∞–≤–∏–ª–∞)
          title !== '–ü—Ä–∏–ø–µ–≤.' && 
          title !== '–ü—Ä–∏–ø–µ–≤:' &&
          !title.match(/^–ë—É–¥—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º/)) {
        foundTitles.push({ title, page: i + 1 });  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ = –∏–Ω–¥–µ–∫—Å + 1
      }
    }
    
    logger.info(`–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ ${foundTitles.length} –ø–µ—Å–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏`);
    
    const songs = [];
    
    // –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    if (!searchByText) {
      const normalizedQuery = query.toLowerCase().trim();
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (—Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–æ)
      let exactMatches = foundTitles.filter(item => 
        item.title.toLowerCase() === normalizedQuery
      );
      
      // –ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç, —Ç–æ–≥–¥–∞ –∏—â–µ–º –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
      if (exactMatches.length === 0) {
        // –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const queryWords = normalizedQuery.split(/\s+/);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–µ –∏–∑ —Å–ª–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        exactMatches = foundTitles.filter(item => {
          const titleLower = item.title.toLowerCase();
          // –ü–µ—Å–Ω—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
          return queryWords.every(word => titleLower.includes(word));
        });
        
        // –ï—Å–ª–∏ –∏ —Ç–∞–∫ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (exactMatches.length === 0) {
          exactMatches = foundTitles.filter(item => 
            item.title.toLowerCase().includes(normalizedQuery)
          );
        }
      }
      
      logger.info(`–ù–∞–π–¥–µ–Ω–æ ${exactMatches.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}"`, {
        query,
        matches: exactMatches.map(m => m.title)
      });
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      for (const titleInfo of exactMatches) {
        try {
          const documentId = getDocumentIdFromUrl(process.env.SONGBOOK_URL);
          const songContent = await getSongContent(documentId, titleInfo.page);
          
          if (songContent) {
            songs.push({
              title: titleInfo.title,
              content: songContent,
              page: titleInfo.page
            });
          }
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–µ—Å–Ω–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${titleInfo.page}:`, {
            error: error.message
          });
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –æ–¥–Ω–æ–π –∏–∑ –ø–µ—Å–µ–Ω
        }
      }
    } 
    // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –ø–µ—Å–Ω–∏
    else {
      const normalizedQuery = query.toLowerCase().trim();
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Å–Ω–∏
      for (const titleInfo of foundTitles) {
        try {
          const documentId = getDocumentIdFromUrl(process.env.SONGBOOK_URL);
          const songContent = await getSongContent(documentId, titleInfo.page);
          
          if (songContent && songContent.toLowerCase().includes(normalizedQuery)) {
            songs.push({
              title: titleInfo.title,
              content: songContent,
              page: titleInfo.page
            });
          }
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–µ—Å–Ω–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${titleInfo.page}:`, {
            error: error.message
          });
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–ª—è –æ–¥–Ω–æ–π –∏–∑ –ø–µ—Å–µ–Ω
        }
      }
    }
    
    logger.info(`–ù–∞–π–¥–µ–Ω–æ ${songs.length} –ø–µ—Å–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}"`, {
      query,
      searchByText,
      songs: songs.map(s => ({ title: s.title, page: s.page }))
    });
    return songs;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω:', {
      error: error.message,
      stack: error.stack,
      query,
      searchByText
    });
    return [];
  }
}

/**
 * –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ë–û–¢–ê
 */

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleStartCommand(msg) {
  const userId = msg.from.id;
  const userName = msg.from.first_name;
  
  logger.info(`User ${userId} (${userName}) started the bot`, {
    command: '/start',
    user: {
      id: userId,
      name: userName
    }
  });
  
  await bot.sendMessage(
    msg.chat.id, 
    `–ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç—ã –ø–µ—Å–µ–Ω –ø–æ–¥ –≥–∏—Ç–∞—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /search –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.`,
    { parse_mode: 'HTML' }
  );
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
  if (!userStates.has(userId)) {
    userStates.set(userId, {
      waitingForSongName: false,
      waitingForTextSearch: false,
      lastSongPage: null,
      lastSearch: null
    });
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  stats.commandsUsed['/start'] = (stats.commandsUsed['/start'] || 0) + 1;
  stats.userActivity[userId] = (stats.userActivity[userId] || 0) + 1;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleHelpCommand(msg) {
  const userId = msg.from.id;
  const userName = msg.from.first_name;
  
  logger.info(`User ${userId} (${userName}) requested help`, {
    command: '/help',
    user: {
      id: userId,
      name: userName
    }
  });
  
  const helpMessage = 
    '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n' +
    '/search <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏> - –ø–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n' +
    '/text <—Ç–µ–∫—Å—Ç> - –ø–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ —Ç–µ–∫—Å—Ç—É\n' +
    '/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω\n' +
    '/random - —Å–ª—É—á–∞–π–Ω–∞—è –ø–µ—Å–Ω—è\n' +
    '/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞';
  
  await bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'HTML' });
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  stats.commandsUsed['/help'] = (stats.commandsUsed['/help'] || 0) + 1;
  stats.userActivity[userId] = (stats.userActivity[userId] || 0) + 1;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleListCommand(msg) {
  const userId = msg.from.id;
  const userName = msg.from.first_name;
  
  logger.info(`User ${userId} (${userName}) requested song list`, {
    command: '/list',
    user: {
      id: userId,
      name: userName
    }
  });
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    const document = await getDocumentContent();
    
    if (!document || !document.body || !document.body.content) {
      throw new Error('Invalid document structure');
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (TITLE —ç–ª–µ–º–µ–Ω—Ç—ã) –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    const titleElements = document.body.content.filter(item => 
      item && item.paragraph && 
      item.paragraph.paragraphStyle && 
      item.paragraph.paragraphStyle.namedStyleType === 'TITLE' &&
      item.paragraph.elements && 
      item.paragraph.elements[0] && 
      item.paragraph.elements[0].textRun
    );
    
    if (titleElements.length <= 1) {
      await bot.sendMessage(msg.chat.id, '–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Å–µ–Ω.');
      return;
    }
    
    // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø—Ä–∞–≤–∏–ª–∞) –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–≥–æ
    const songTitles = [];
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞ 1 (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç)
    for (let i = 1; i < titleElements.length; i++) {
      const title = titleElements[i].paragraph.elements[0].textRun.content.trim();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –Ω–µ –ø–µ—Å–Ω–∏
      if (title && 
          !title.includes('–ü—Ä–∞–≤–∏–ª–∞') && 
          !title.match(/^\d+\./) && // –ù–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞ –∏ —Ç–æ—á–∫–∏ (–ø—Ä–∞–≤–∏–ª–∞)
          title !== '–ü—Ä–∏–ø–µ–≤.' && 
          title !== '–ü—Ä–∏–ø–µ–≤:' &&
          !title.match(/^–ë—É–¥—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º/)) {
        songTitles.push({ title, page: i + 1 });  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ = –∏–Ω–¥–µ–∫—Å + 1
      }
    }
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–µ—Å–µ–Ω
    if (songTitles.length === 0) {
      await bot.sendMessage(msg.chat.id, '–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–µ—Å–µ–Ω –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.');
      return;
    }
    
    logger.info(`Found ${songTitles.length} songs for list command`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ø–µ—Å–µ–Ω
    let message = '<b>–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω:</b>\n\n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏
    for (let i = 0; i < songTitles.length; i++) {
      const songNumber = i + 1;
      const songTitle = songTitles[i].title.trim().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å –Ω–æ–º–µ—Ä–æ–º
      message += `${songNumber}. ${songTitle}\n`;
      
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
      if (message.length > MAX_MESSAGE_LENGTH - 200 && i < songTitles.length - 1) {
        await bot.sendMessage(msg.chat.id, message, { parse_mode: 'HTML' });
        message = '<b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω:</b>\n\n';
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –±—ã–ª –∫–æ—Ä–æ—Ç–∫–∏–º)
    if (message.length > 0) {
      await bot.sendMessage(msg.chat.id, message, { parse_mode: 'HTML' });
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    stats.commandsUsed['/list'] = (stats.commandsUsed['/list'] || 0) + 1;
    stats.userActivity[userId] = (stats.userActivity[userId] || 0) + 1;
  } catch (error) {
    logger.error('Error handling list command:', {
      error: error.message,
      stack: error.stack,
      userId
    });
    
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Å–Ω–∏
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleRandomCommand(msg) {
  const userId = msg.from.id;
  const userName = msg.from.first_name;
  
  logger.info(`User ${userId} (${userName}) requested a random song`, {
    command: '/random',
    user: {
      id: userId,
      name: userName
    }
  });
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    const document = await getDocumentContent();
    
    if (!document || !document.body || !document.body.content) {
      throw new Error('Invalid document structure');
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (TITLE —ç–ª–µ–º–µ–Ω—Ç—ã) –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    const titleElements = document.body.content.filter(item => 
      item && item.paragraph && 
      item.paragraph.paragraphStyle && 
      item.paragraph.paragraphStyle.namedStyleType === 'TITLE' &&
      item.paragraph.elements && 
      item.paragraph.elements[0] && 
      item.paragraph.elements[0].textRun
    );
    
    if (titleElements.length <= 1) {
      await bot.sendMessage(msg.chat.id, '–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Å–µ–Ω.');
      return;
    }
    
    // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø—Ä–∞–≤–∏–ª–∞) –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–≥–æ
    const songs = [];
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞ 1 (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç)
    for (let i = 1; i < titleElements.length; i++) {
      const title = titleElements[i].paragraph.elements[0].textRun.content.trim();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –Ω–µ –ø–µ—Å–Ω–∏
      if (title && 
          !title.includes('–ü—Ä–∞–≤–∏–ª–∞') && 
          !title.match(/^\d+\./) && // –ù–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –Ω–æ–º–µ—Ä–∞ –∏ —Ç–æ—á–∫–∏ (–ø—Ä–∞–≤–∏–ª–∞)
          title !== '–ü—Ä–∏–ø–µ–≤.' && 
          title !== '–ü—Ä–∏–ø–µ–≤:' &&
          !title.match(/^–ë—É–¥—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º/)) {
        songs.push({ title, page: i + 1 });  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ = –∏–Ω–¥–µ–∫—Å + 1
      }
    }
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–µ—Å–µ–Ω
    if (songs.length === 0) {
      await bot.sendMessage(msg.chat.id, '–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–µ—Å–µ–Ω –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.');
      return;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é
    const randomIndex = Math.floor(Math.random() * songs.length);
    const randomSong = songs[randomIndex];
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Å–Ω–∏
    const documentId = getDocumentIdFromUrl(process.env.SONGBOOK_URL);
    const songContent = await getSongContent(documentId, randomSong.page);
    
    if (!songContent) {
      await bot.sendMessage(
        msg.chat.id, 
        `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–µ—Å–Ω—é (${randomSong.title}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`
      );
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–µ—Å–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.set(userId, userStates.get(userId) || {});
    userStates.get(userId).lastSongPage = randomSong.page;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await sendFormattedSong(msg.chat.id, randomSong.title, songContent, true);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    stats.commandsUsed['/random'] = (stats.commandsUsed['/random'] || 0) + 1;
    stats.userActivity[userId] = (stats.userActivity[userId] || 0) + 1;
  } catch (error) {
    logger.error('Error handling random command:', {
      error: error.message,
      stack: error.stack,
      userId
    });
    
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Å–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search - –ø–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} match - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
 */
async function handleSearchCommand(msg, match) {
  const userId = msg.from.id;
  const userName = msg.from.first_name;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  let query = '';
  
  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ä–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, /search –ê–ª—ã–µ –ø–∞—Ä—É—Å–∞)
  if (match && match[1]) {
    query = match[1].trim();
  }
  
  logger.info(`User ${userId} (${userName}) searching for song by name`, {
    command: '/search',
    query,
    user: {
      id: userId,
      name: userName
    }
  });
  
  if (query) {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω, –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø–æ–∏—Å–∫
    await performSongSearch(msg, query, false);
  } else {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
    await bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.set(userId, userStates.get(userId) || {});
    userStates.get(userId).waitingForSongName = true;
    userStates.get(userId).waitingForTextSearch = false;
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  stats.commandsUsed['/search'] = (stats.commandsUsed['/search'] || 0) + 1;
  stats.userActivity[userId] = (stats.userActivity[userId] || 0) + 1;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /text - –ø–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} match - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
 */
async function handleTextCommand(msg, match) {
  const userId = msg.from.id;
  const userName = msg.from.first_name;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  let query = '';
  
  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ä–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, /text –£–µ–¥—É –∫ —Å–µ–≤–µ—Ä–Ω–æ–º—É)
  if (match && match[1]) {
    query = match[1].trim();
  }
  
  logger.info(`User ${userId} (${userName}) searching for song by text`, {
    command: '/text',
    query,
    user: {
      id: userId,
      name: userName
    }
  });
  
  if (query) {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω, –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    await performSongSearch(msg, query, true);
  } else {
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
    await bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.set(userId, userStates.get(userId) || {});
    userStates.get(userId).waitingForSongName = false;
    userStates.get(userId).waitingForTextSearch = true;
  }
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  stats.commandsUsed['/text'] = (stats.commandsUsed['/text'] || 0) + 1;
  stats.userActivity[userId] = (stats.userActivity[userId] || 0) + 1;
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–µ—Å–Ω–∏
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {boolean} searchByText - –§–ª–∞–≥ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (–µ—Å–ª–∏ false - –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
 */
async function performSongSearch(msg, query, searchByText = false) {
  try {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    let messageText = '';
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–∏—Å–∫ –Ω–∞—á–∞—Ç
    const waitMessage = await bot.sendMessage(
      chatId, 
      searchByText ? '–ò—â—É –ø–µ—Å–Ω—é –ø–æ —Ç–µ–∫—Å—Ç—É...' : '–ò—â—É –ø–µ—Å–Ω—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...'
    );
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–µ—Å–µ–Ω
    const songs = await searchSongs(query, searchByText);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.set(userId, userStates.get(userId) || {});
    userStates.get(userId).lastSearch = {
      query: query,
      searchByText: searchByText
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    if (songs.length === 0) {
      messageText = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Å–µ–Ω.';
      await bot.editMessageText(messageText, {
        chat_id: chatId,
        message_id: waitMessage.message_id
      });
      
      logger.info(`No songs found for query "${query}"`, {
        searchByText,
        userId
      });
      return;
    }
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–µ—Å–Ω—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë —Å—Ä–∞–∑—É
    if (songs.length === 1) {
      const song = songs[0];
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
      await bot.deleteMessage(chatId, waitMessage.message_id);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–µ—Å–Ω—é
      await sendFormattedSong(chatId, song.title, song.content);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–µ—Å–Ω–∏
      userStates.get(userId).lastSongPage = song.page;
      
      logger.info(`Found and sent one song for query "${query}"`, {
        searchByText,
        userId,
        songTitle: song.title
      });
      return;
    }
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Å–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
    messageText = `–ù–∞–π–¥–µ–Ω–æ ${songs.length} –ø–µ—Å–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é:`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–µ—Å–µ–Ω
    const keyboard = songs.map(song => {
      return [{
        text: song.title,
        callback_data: `song_${song.page}`
      }];
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞
    await bot.editMessageText(messageText, {
      chat_id: chatId,
      message_id: waitMessage.message_id,
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
    
    logger.info(`Found ${songs.length} songs for query "${query}"`, {
      searchByText,
      userId,
      songTitles: songs.map(s => s.title)
    });
  } catch (error) {
    logger.error('Error performing song search:', {
      error: error.message,
      stack: error.stack,
      query,
      searchByText,
      userId: msg.from.id
    });
    
    await bot.sendMessage(
      msg.chat.id, 
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Å–µ–Ω.'
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleTextMessage(msg) {
  const userId = msg.from.id;
  const text = msg.text.trim();
  
  // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏
  if (userStates.has(userId) && userStates.get(userId).waitingForSongName) {
    userStates.get(userId).waitingForSongName = false;
    
    logger.info(`User ${userId} provided song name for search: "${text}"`, {
      messageType: 'text',
      user: {
        id: userId,
        name: msg.from.first_name
      }
    });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    await performSongSearch(msg, text, false);
  }
  // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
  else if (userStates.has(userId) && userStates.get(userId).waitingForTextSearch) {
    userStates.get(userId).waitingForTextSearch = false;
    
    logger.info(`User ${userId} provided text for song search: "${text}"`, {
      messageType: 'text',
      user: {
        id: userId,
        name: msg.from.first_name
      }
    });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
    await performSongSearch(msg, text, true);
  }
  // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–µ—Å–Ω–∏
  else {
    logger.info(`User ${userId} sent text message: "${text}"`, {
      messageType: 'text',
      user: {
        id: userId,
        name: msg.from.first_name
      }
    });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    await performSongSearch(msg, text, false);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
 * @param {Object} callback - Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function handleCallbackQuery(callback) {
  const userId = callback.from.id;
  const userName = callback.from.first_name;
  const data = callback.data;
  const chatId = callback.message.chat.id;
  
  logger.info(`User ${userId} (${userName}) clicked button: ${data}`, {
    messageType: 'callbackQuery',
    user: {
      id: userId,
      name: userName
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback —è–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Å–Ω–∏
  if (data.startsWith('song_')) {
    const pageNumber = parseInt(data.split('_')[1], 10);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –ø–µ—Å–Ω—é –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try {
      const documentId = getDocumentIdFromUrl(process.env.SONGBOOK_URL);
      const songContent = await getSongContent(documentId, pageNumber);
      
      if (!songContent) {
        await bot.answerCallbackQuery(callback.id, {
          text: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–µ—Å–Ω—é.',
          show_alert: true
        });
        return;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Å–Ω–∏ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const songTitle = songContent.split('\n')[0].trim();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–µ—Å–Ω–∏
      userStates.set(userId, userStates.get(userId) || {});
      userStates.get(userId).lastSongPage = pageNumber;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await sendFormattedSong(chatId, songTitle, songContent);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–µ—Å–µ–Ω
      await bot.deleteMessage(chatId, callback.message.message_id);
      
      // –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ
      await bot.answerCallbackQuery(callback.id);
    } catch (error) {
      logger.error('Error handling callback query for song selection:', {
        error: error.message,
        stack: error.stack,
        userId,
        pageNumber
      });
      
      await bot.answerCallbackQuery(callback.id, {
        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Å–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        show_alert: true
      });
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è callback-–∫–Ω–æ–ø–æ–∫
    stats.callbacksUsed['song_selection'] = (stats.callbacksUsed['song_selection'] || 0) + 1;
    stats.userActivity[userId] = (stats.userActivity[userId] || 0) + 1;
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –∞–∫–∫–æ—Ä–¥–æ–º
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @return {boolean} - true, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –∞–∫–∫–æ—Ä–¥
 */
function isChord(text) {
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞–∫–∫–æ—Ä–¥–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã–µ)
  const chordPatterns = [
    /^[ABCDEFGH][m]?$/,  // –ë–∞–∑–æ–≤—ã–µ –∞–∫–∫–æ—Ä–¥—ã: A, Am, C, Cm, –∏ —Ç.–¥.
    /^[ABCDEFGH][m]?(7|9|11|13|maj7|min7|sus2|sus4|dim|aug)?$/,  // –° –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º 7, maj7, –∏ —Ç.–¥.
    /^[ABCDEFGH][m]?[\/#][ABCDEFGH]$/,  // –ê–∫–∫–æ—Ä–¥—ã —Å –±–∞—Å–æ–º: A/G, C/G, –∏ —Ç.–¥.
    /^[ABCDEFGH][#b]?[m]?$/  // –ê–∫–∫–æ—Ä–¥—ã —Å –¥–∏–µ–∑–∞–º–∏/–±–µ–º–æ–ª—è–º–∏: A#, Bb, F#m, –∏ —Ç.–¥.
  ];

  // –¢–∏–ø–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫–∫–æ—Ä–¥–æ–≤ –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const commonChords = [
    'A', 'Am', 'A7', 'Amaj7', 'Am7', 'Asus', 'Asus4', 'A/E',
    'B', 'Bm', 'B7', 'Bmaj7', 'Bm7', 'Bsus', 'Bsus4', 'B/F#',
    'C', 'Cm', 'C7', 'Cmaj7', 'Cm7', 'Csus', 'Csus4', 'C/G',
    'D', 'Dm', 'D7', 'Dmaj7', 'Dm7', 'Dsus', 'Dsus4', 'D/A',
    'E', 'Em', 'E7', 'Emaj7', 'Em7', 'Esus', 'Esus4', 'E/B',
    'F', 'Fm', 'F7', 'Fmaj7', 'Fm7', 'Fsus', 'Fsus4', 'F/C',
    'G', 'Gm', 'G7', 'Gmaj7', 'Gm7', 'Gsus', 'Gsus4', 'G/D',
    'A#', 'A#m', 'Bb', 'Bbm', 'C#', 'C#m', 'Db', 'Dbm',
    'D#', 'D#m', 'Eb', 'Ebm', 'F#', 'F#m', 'Gb', 'Gbm',
    'G#', 'G#m', 'Ab', 'Abm'
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–º—É –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∞–∫–∫–æ—Ä–¥–æ–º
  const trimmedText = text.trim();
  
  // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
  if (commonChords.includes(trimmedText)) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º
  for (const pattern of chordPatterns) {
    if (pattern.test(trimmedText)) {
      return true;
    }
  }
  
  return false;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —á–∞—Å—Ç–∏ –ø–µ—Å–Ω–∏ (–ø—Ä–∏–ø–µ–≤, –∫—É–ø–ª–µ—Ç –∏ —Ç.–¥.)
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @return {boolean} - true, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —á–∞—Å—Ç–∏ –ø–µ—Å–Ω–∏
 */
function isSongSectionHeader(text) {
  const headerPatterns = [
    /^(–ü—Ä–∏–ø–µ–≤|Chorus)[\.:]?$/i,
    /^(–ö—É–ø–ª–µ—Ç|Verse)\s*\d*[\.:]?$/i,
    /^(–ë—Ä–∏–¥–∂|Bridge)[\.:]?$/i,
    /^(–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ|Intro)[\.:]?$/i,
    /^(–ö–æ–¥–∞|Coda)[\.:]?$/i,
    /^(–ü—Ä–æ–∏–≥—Ä—ã—à|Interlude)[\.:]?$/i,
    /^(–§–∏–Ω–∞–ª|Outro)[\.:]?$/i
  ];
  
  const trimmedText = text.trim();
  
  for (const pattern of headerPatterns) {
    if (pattern.test(trimmedText)) {
      return true;
    }
  }
  
  return false;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –≤ HTML —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞–∫–∫–æ—Ä–¥–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
 * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Å–Ω–∏
 * @returns {string} - HTML-–≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏
 */
function formatSongToHTML(title, content) {
  if (!content) return '';
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ HTML-—Å–∏–º–≤–æ–ª—ã
  function escapeHTML(text) {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  }
  
  const escapedTitle = escapeHTML(title);
  const lines = content.split('\n');
  
  // –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ, —Ä–∏—Ç–º–µ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
  let author = '';
  let rhythm = '';
  let notes = '';
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  const authorPatterns = [
    /^(–ê–≤—Ç–æ—Ä|–ú—É–∑—ã–∫–∞|–°–ª–æ–≤–∞|–ú—É–∑\.|–°–ª\.|–ê–≤—Ç–æ—Ä –∏ –º—É–∑—ã–∫–∞)[:\s]+(.+)$/i,
    /^(–°–ª–æ–≤–∞ –∏ –º—É–∑—ã–∫–∞)[:\s]+(.+)$/i,
    /^.*?(–∞–≤—Ç–æ—Ä|–º—É–∑—ã–∫–∞)[:\s]+([^,]+).*/i
  ];
  
  const rhythmPatterns = [
    /^(–†–∏—Ç–º|–†–∏—Ç–º–∏–∫–∞|–ë–æ–π)[:\s]+(.+)$/i,
    /^.*?(—Ä–∏—Ç–º|—Ä–∏—Ç–º–∏–∫–∞)[:\s]+([^,]+).*/i,
    /^(–°–ª–æ–∂–Ω—ã–π –±–æ–π|–ü—Ä–æ—Å—Ç–æ–π –±–æ–π|–ü–µ—Ä–µ–±–æ—Ä)$/i
  ];
  
  const notesPatterns = [
    /^(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ|Note|–ü—Ä–∏–º–µ—á\.)[:\s]+(.+)$/i,
    /^.*?(–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ)[:\s]+([^,]+).*/i
  ];
  
  // –ò—â–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
  const metadataLines = Math.min(10, lines.length);
  for (let i = 0; i < metadataLines; i++) {
    const line = lines[i].trim();
    
    // –ò—â–µ–º –∞–≤—Ç–æ—Ä–∞
    if (!author) {
      for (const pattern of authorPatterns) {
        const match = line.match(pattern);
        if (match && match[2]) {
          author = match[2].trim();
          lines[i] = ''; // –£–¥–∞–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
          break;
        }
      }
    }
    
    // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Ç–º–µ
    if (!rhythm) {
      for (const pattern of rhythmPatterns) {
        const match = line.match(pattern);
        if (match) {
          rhythm = match[2] ? match[2].trim() : match[1].trim();
          lines[i] = ''; // –£–¥–∞–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
          break;
        }
      }
    }
    
    // –ò—â–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
    if (!notes) {
      for (const pattern of notesPatterns) {
        const match = line.match(pattern);
        if (match && match[2]) {
          notes = match[2].trim();
          lines[i] = ''; // –£–¥–∞–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
          break;
        }
      }
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º HTML –ø–µ—Å–Ω–∏
  let html = '<div class="song">\n';
  html += `<h2 class="song-title">${escapedTitle}</h2>\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
  let metadataHTML = '';
  if (author) {
    metadataHTML += `<div class="song-author">–ê–≤—Ç–æ—Ä: ${escapeHTML(author)}</div>\n`;
  }
  if (rhythm) {
    metadataHTML += `<div class="song-rhythm">–†–∏—Ç–º: ${escapeHTML(rhythm)}</div>\n`;
  }
  if (notes) {
    metadataHTML += `<div class="song-notes">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${escapeHTML(notes)}</div>\n`;
  }
  
  if (metadataHTML) {
    html += `<div class="song-metadata">\n${metadataHTML}</div>\n`;
  }
  
  // –ù–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
  html += '<div class="song-content">\n';
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞
  let inChordSection = false;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ç–∫–∏ –∞–∫–∫–æ—Ä–¥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
  function markupChords(line) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∞–∫–∫–æ—Ä–¥—ã (–æ–±—ã—á–Ω–æ –∫—Ä–∞—Ç–∫–∏–µ –≥—Ä—É–ø–ø—ã —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏)
    const words = line.split(/\s+/);
    let hasChords = false;
    const markedLine = words.map(word => {
      if (isChord(word)) {
        hasChords = true;
        return `<span class="chord">${escapeHTML(word)}</span>`;
      }
      return escapeHTML(word);
    }).join(' ');
    
    return { markedLine, hasChords };
  }
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if (line === '') {
      html += '<br>\n';
      continue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å–µ–∫—Ü–∏–∏ (–ø—Ä–∏–ø–µ–≤, –∫—É–ø–ª–µ—Ç –∏ —Ç.–¥.)
    if (isSongSectionHeader(line)) {
      html += `<h3 class="section-header">${escapeHTML(line)}</h3>\n`;
      continue;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∞–∫–∫–æ—Ä–¥–∞–º–∏
    const { markedLine, hasChords } = markupChords(line);
    
    if (hasChords) {
      html += `<div class="chord-line">${markedLine}</div>\n`;
    } else {
      html += `<p class="lyrics">${escapeHTML(line)}</p>\n`;
    }
  }
  
  html += '</div>\n'; // –ó–∞–∫—Ä—ã–≤–∞–µ–º song-content
  html += '</div>\n'; // –ó–∞–∫—Ä—ã–≤–∞–µ–º song
  
  return html;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–µ—Å–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @param {number} chatId - ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏
 * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Å–Ω–∏
 * @param {boolean} isRandom - –ü—Ä–∏–∑–Ω–∞–∫ —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Å–Ω–∏
 */
async function sendFormattedSong(chatId, title, content, isRandom = false) {
  try {
    if (!content) {
      await bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Å–Ω–∏.');
      return;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Å–Ω–µ (–∞–≤—Ç–æ—Ä, —Ä–∏—Ç–º, –ø—Ä–∏–º–µ—á–∞–Ω–∏—è)
    const songInfo = extractSongInfo(content);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const formattedText = formatSongForDisplay(content);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    let messageText = '';
    
    // –î–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Å–Ω–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (isRandom) {
      messageText = `üé≤ <b>–°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Å–Ω—è</b>\n\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Å–Ω–∏ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
    messageText += `<b>${title.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')}</b>`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (songInfo.author) {
      messageText += `\n<i>${songInfo.author.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')}</i>`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Ç–º–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (songInfo.rhythm) {
      messageText += `\n<i>–†–∏—Ç–º: ${songInfo.rhythm.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')}</i>`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (songInfo.notes) {
      messageText += `\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${songInfo.notes.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')}</i>`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
    messageText += `\n\n${formattedText}`;
    
    // –í—ã–¥–µ–ª—è–µ–º –∞–∫–∫–æ—Ä–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ (–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –∏–ª–∏ –∂–∏—Ä–Ω—ã–º)
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = messageText.split('\n');
    let enhancedMessage = '';
    
    for (const line of lines) {
      if (line.trim() === '') {
        enhancedMessage += '\n';
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫–∫–æ—Ä–¥–æ–≤
      const words = line.split(/\s+/);
      let hasChords = false;
      const modifiedLine = words.map(word => {
        const cleanWord = word.replace(/<\/?[^>]+(>|$)/g, ''); // –£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (isChord(cleanWord)) {
          hasChords = true;
          return word.replace(cleanWord, `<b>${cleanWord}</b>`);
        }
        return word;
      }).join(' ');
      
      enhancedMessage += modifiedLine + '\n';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if (enhancedMessage.length > MAX_MESSAGE_LENGTH) {
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
      await sendLongMessage(chatId, enhancedMessage);
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(chatId, enhancedMessage, {
        parse_mode: 'HTML'
      });
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏
    stats.songViews[title] = (stats.songViews[title] || 0) + 1;
  } catch (error) {
    logger.error('Error sending formatted song:', {
      error: error.message,
      stack: error.stack,
      chatId,
      title
    });
    
    await bot.sendMessage(
      chatId, 
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Å–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {number} chatId - ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param {string} text - –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
async function sendLongMessage(chatId, text) {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –∑–∞–ø–∞—Å–æ–º)
    const maxLength = MAX_MESSAGE_LENGTH - 300;
    
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ –ª–∏–º–∏—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
    if (text.length <= maxLength) {
      await bot.sendMessage(chatId, text, { parse_mode: 'HTML' });
      return;
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = text.split('\n');
    let currentPart = '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    let songTitle = '';
    let songMetadata = [];
    let foundEmptyLine = false;
    
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Å–Ω–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–¥–æ –≤—Ç–æ—Ä–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏)
    for (let i = 0; i < Math.min(15, lines.length); i++) {
      const line = lines[i].trim();
      
      if (line === '') {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Å–±–æ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if (foundEmptyLine) {
          break;
        }
        foundEmptyLine = true;
        songMetadata.push('');
        continue;
      }
      
      // –ü–µ—Ä–≤–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫
      if (songTitle === '' && line !== '') {
        songTitle = line;
        continue;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–∞–≤—Ç–æ—Ä, —Ä–∏—Ç–º –∏ —Ç.–¥.)
      if (line.startsWith('<i>') || i < 5) {
        songMetadata.push(line);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    let messageHeader = songTitle ? songTitle : '';
    if (songMetadata.length > 0) {
      messageHeader += '\n' + songMetadata.join('\n');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    currentPart = messageHeader + '\n\n';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –º—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
    const skipLines = messageHeader.split('\n').length + 2; // +2 –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Å—Ç–∞–≤—à–∏–º—Å—è —Å—Ç—Ä–æ–∫–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    for (let i = skipLines; i < lines.length; i++) {
      const line = lines[i];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—É–¥–µ—Ç –ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏
      if (currentPart.length + line.length + 1 > maxLength) {
        // –ï—Å–ª–∏ —á–∞—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
        if (currentPart.trim()) {
          await bot.sendMessage(chatId, currentPart, { parse_mode: 'HTML' });
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º [–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ]
        currentPart = `<b>[–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ] ${songTitle.replace(/<\/?[^>]+(>|$)/g, '')}</b>\n\n${line}\n`;
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
        currentPart += line + '\n';
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (currentPart.trim()) {
      await bot.sendMessage(chatId, currentPart, { parse_mode: 'HTML' });
    }
  } catch (error) {
    logger.error('Error sending long message:', {
      error: error.message,
      stack: error.stack,
      chatId
    });
    
    await bot.sendMessage(
      chatId, 
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ngrok –∏–ª–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ URL
 * @returns {Promise<void>}
 */
async function setupWebhook() {
  try {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π
    await bot.deleteWebHook();
    logger.info('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook —É–¥–∞–ª–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ URL webhook –Ω–∞–ø—Ä—è–º—É—é
    if (process.env.WEBHOOK_URL) {
      await bot.setWebHook(process.env.WEBHOOK_URL);
      logger.info('–ù–æ–≤—ã–π webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', process.env.WEBHOOK_URL);
      
      const webhookInfo = await bot.getWebHookInfo();
      logger.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', webhookInfo);
      return;
    }
    
    // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ngrok
    // –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
    const ngrokPath = path.join(__dirname, '..', 'ngrok.exe'); // –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—É—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const ngrok = exec(`${ngrokPath} http 3333`, (error, stdout, stderr) => {
      if (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok:', error);
        return;
      }
      logger.info('Ngrok –∑–∞–ø—É—â–µ–Ω:', stdout);
    });

    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ ngrok
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –ü–æ–ª—É—á–∞–µ–º URL ngrok
    const response = await fetch('http://localhost:4040/api/tunnels');
    const data = await response.json();
    const ngrokUrl = data.tunnels[0].public_url;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    const webhookUrl = `${ngrokUrl}/api/webhook`;
    await bot.setWebHook(webhookUrl);
    logger.info('–ù–æ–≤—ã–π webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å ngrok:', webhookUrl);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    const webhookInfo = await bot.getWebHookInfo();
    logger.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', webhookInfo);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å ngrok –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    process.ngrok = ngrok;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error);
    throw error;
  }
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
process.on('SIGINT', () => {
  if (process.ngrok) {
    process.ngrok.kill();
  }
  process.exit();
});

// Endpoint –¥–ª—è webhook
app.post('/api/webhook', (req, res) => {
  try {
    bot.handleUpdate(req.body);
    logger.debug('Webhook-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    res.sendStatus(200);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.sendStatus(500);
  }
});