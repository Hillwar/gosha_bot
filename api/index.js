/**
 * Gosha Bot - Telegram –±–æ—Ç –¥–ª—è –ø–µ—Å–µ–Ω —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏
 */
require('dotenv').config();
const { Telegraf } = require('telegraf');
const { google } = require('googleapis');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö—ç—à –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –ø–µ—Å–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const cache = {
  songs: [],
  lastUpdate: null,
  updateInterval: 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
};

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–æ—Ä –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–≥—Ä—É–∑–∫–µ
const loadingAnimations = [
  "üîç –ò—â—É... ‚è≥",
  "üîç –ò—â—É... ‚åõ",
  "üîç –ò—â—É... ‚è≥",
  "üîç –ò—â—É... ‚åõ"
];

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
async function animateLoading(ctx, initialMessage, animationTexts, duration = 5000) {
  let currentIndex = 0;
  let loadingMsg;
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    loadingMsg = await ctx.reply(initialMessage || animationTexts[0]);
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ ID —á–∞—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const messageId = loadingMsg.message_id;
    const chatId = ctx.chat.id;
    
    const intervalId = setInterval(async () => {
      currentIndex = (currentIndex + 1) % animationTexts.length;
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (chatId && messageId) {
          await ctx.telegram.editMessageText(
            chatId, 
            messageId, 
            null, 
            animationTexts[currentIndex]
          );
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏:', e.message);
        clearInterval(intervalId); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }, 500);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    return {
      stop: async () => {
        clearInterval(intervalId);
        return loadingMsg ? loadingMsg.message_id : null;
      },
      messageId: loadingMsg ? loadingMsg.message_id : null,
      chatId: ctx.chat.id
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    return {
      stop: async () => null,
      messageId: null,
      chatId: ctx.chat.id
    };
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω –≤ –∞–∫–∫–æ—Ä–¥–Ω–∏–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
  ctx.reply(
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n' +
    '/search - –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏ –≤ –∞–∫–∫–æ—Ä–¥–Ω–∏–∫–µ\n' +
    '/list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω\n' +
    '/circlerules - –ü—Ä–∞–≤–∏–ª–∞ –æ—Ä–ª—è—Ç—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞\n' +
    '/random - –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Å–Ω—è'
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /search
bot.command('search', async (ctx) => {
  const query = ctx.message.text.replace('/search', '').trim();
  if (!query) {
    return ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /search –ü–µ—Ä–µ–º–µ–Ω');
  }
  await performSearch(ctx, query);
});

// –ö–æ–º–∞–Ω–¥–∞ /list
bot.command('list', async (ctx) => {
  const animation = await animateLoading(
    ctx, 
    "üîç –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω... ‚è≥", 
    ["üîç –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω... ‚è≥", "üîç –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω... ‚åõ", "üîç –°–æ–±–∏—Ä–∞—é –ø–µ—Å–Ω–∏... ‚è≥", "üîç –°–æ–±–∏—Ä–∞—é –ø–µ—Å–Ω–∏... ‚åõ"]
  );
  
  try {
    const songs = await getSongs();
    if (!songs || songs.length === 0) {
      if (animation.messageId) {
        try {
          await ctx.telegram.editMessageText(
            animation.chatId, 
            animation.messageId, 
            null, 
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          );
        } catch (e) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
      } else {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
      return;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    await animation.stop();
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    try {
      if (animation.messageId) {
        await ctx.telegram.deleteMessage(animation.chatId, animation.messageId);
      }
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏:', e.message);
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω
    let message = '–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –≤ –∞–∫–∫–æ—Ä–¥–Ω–∏–∫–µ üìñ:\n\n';
    songs.forEach((song, index) => {
      message += `${index + 1}. ${song.title}\n`;
    });
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if (message.length > 4000) {
      const chunks = message.match(/.{1,4000}/gs);
      for (const chunk of chunks) {
        await ctx.reply(chunk);
      }
    } else {
      await ctx.reply(message);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω:', error);
    
    try {
      if (animation.messageId) {
        await ctx.telegram.editMessageText(
          animation.chatId, 
          animation.messageId, 
          null, 
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      } else {
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /random
bot.command('random', async (ctx) => {
  const animation = await animateLoading(
    ctx, 
    "üé≤ –í—ã–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é... ‚è≥", 
    ["üé≤ –í—ã–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é... ‚è≥", "üé≤ –í—ã–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é... ‚åõ", "üé≤ –ü–æ–¥–±–∏—Ä–∞—é —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ... ‚è≥", "üé≤ –ü–æ–¥–±–∏—Ä–∞—é —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ... ‚åõ"]
  );
  
  try {
    const songs = await getSongs();
    if (!songs || songs.length === 0) {
      if (animation.messageId) {
        try {
          await ctx.telegram.editMessageText(
            animation.chatId, 
            animation.messageId, 
            null, 
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          );
        } catch (e) {
          await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
      } else {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
      return;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    await animation.stop();
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    try {
      if (animation.messageId) {
        await ctx.telegram.deleteMessage(animation.chatId, animation.messageId);
      }
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏:', e.message);
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é
    const randomIndex = Math.floor(Math.random() * songs.length);
    const song = songs[randomIndex];
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await ctx.reply(`üéµ –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Å–Ω—è:\n\n${formatSongForDisplay(song)}`, { 
      parse_mode: 'HTML'
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫–∫–æ—Ä–¥–Ω–∏–∫
    await ctx.reply(`<a href="${process.env.SONGBOOK_URL}">–û—Ç–∫—Ä—ã—Ç—å –∞–∫–∫–æ—Ä–¥–Ω–∏–∫</a>`, { 
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Å–Ω–∏:', error);
    try {
      if (animation.messageId) {
        await ctx.telegram.editMessageText(
          animation.chatId, 
          animation.messageId, 
          null, 
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      } else {
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    } catch (e) {
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /circlerules
bot.command('circlerules', async (ctx) => {
  const animation = await animateLoading(
    ctx, 
    "üìú –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–ª—è—Ç—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞... ‚è≥", 
    ["üìú –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–ª—è—Ç—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞... ‚è≥", "üìú –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–ª—è—Ç—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞... ‚åõ", "üìú –ò—â—É –ø—Ä–∞–≤–∏–ª–∞... ‚è≥", "üìú –ò—â—É –ø—Ä–∞–≤–∏–ª–∞... ‚åõ"]
  );
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    const document = await getDocumentContent();
    let rules = '';
    let foundSongStart = false;
    
    // –ò—â–µ–º —Ç–µ–∫—Å—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ ‚ô≠
    for (const element of document.body.content) {
      if (element.paragraph) {
        const text = extractParagraphText(element.paragraph);
        
        if (text.includes('‚ô≠')) {
          // –î–æ—Å—Ç–∏–≥–ª–∏ –ø–µ—Ä–≤–æ–π –ø–µ—Å–Ω–∏
          foundSongStart = true;
          break;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –ø—Ä–∞–≤–∏–ª–∞–º
        if (text.trim()) {
          rules += text.trim() + '\n';
        }
      }
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    await animation.stop();
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    try {
      if (animation.messageId) {
        await ctx.telegram.deleteMessage(animation.chatId, animation.messageId);
      }
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏:', e.message);
    }
    
    if (!foundSongStart || rules.trim().length === 0) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–ª—è—Ç—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.');
      return;
    }
    
    await ctx.reply('üìú –ü—Ä–∞–≤–∏–ª–∞ –æ—Ä–ª—è—Ç—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞:\n\n' + rules.trim());
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª:', error);
    try {
      if (animation.messageId) {
        await ctx.telegram.editMessageText(
          animation.chatId, 
          animation.messageId, 
          null, 
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      } else {
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    } catch (e) {
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
bot.on('text', async (ctx) => {
  if (ctx.message.text.startsWith('/')) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  await performSearch(ctx, ctx.message.text);
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–Ω–∏
async function performSearch(ctx, query) {
  const animation = await animateLoading(
    ctx, 
    `üîç –ò—â—É –ø–µ—Å–Ω—é "${query}"... ‚è≥`, 
    [`üîç –ò—â—É –ø–µ—Å–Ω—é "${query}"... ‚è≥`, `üîç –ò—â—É –ø–µ—Å–Ω—é "${query}"... ‚åõ`, `üîç –ò—â—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è... ‚è≥`, `üîç –ò—â—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è... ‚åõ`]
  );
  
  try {
    const songs = await getSongs();
    if (!songs || songs.length === 0) {
      if (animation.messageId) {
        try {
          await ctx.telegram.editMessageText(
            animation.chatId, 
            animation.messageId, 
            null, 
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          );
        } catch (e) {
          await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
      } else {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
      return;
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É
    const matchedSongs = songs.filter(song => 
      song.title.toLowerCase().includes(query.toLowerCase()) ||
      (song.author && song.author.toLowerCase().includes(query.toLowerCase())) ||
      song.fullText.toLowerCase().includes(query.toLowerCase())
    );
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    await animation.stop();
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    try {
      if (animation.messageId) {
        await ctx.telegram.deleteMessage(animation.chatId, animation.messageId);
      }
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏:', e.message);
    }
    
    if (matchedSongs.length === 0) {
      await ctx.reply(`‚ùå –ü–µ—Å–Ω—è "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    } else if (matchedSongs.length === 1) {
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–¥–Ω—É –ø–µ—Å–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      await ctx.reply(`üéµ –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Å–Ω—è:\n\n${formatSongForDisplay(matchedSongs[0])}`, {
        parse_mode: 'HTML'
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫–∫–æ—Ä–¥–Ω–∏–∫
      await ctx.reply(`<a href="${process.env.SONGBOOK_URL}">–û—Ç–∫—Ä—ã—Ç—å –∞–∫–∫–æ—Ä–¥–Ω–∏–∫</a>`, { 
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
      
    } else if (matchedSongs.length <= 10) {
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Å–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
      let message = `üéµ –ù–∞–π–¥–µ–Ω–æ ${matchedSongs.length} –ø–µ—Å–µ–Ω —Å "${query}":\n\n`;
      matchedSongs.forEach((song, index) => {
        message += `${index + 1}. ${song.title}${song.author ? ' - ' + song.author : ''}\n`;
      });
      message += '\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Å–Ω–∏ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.';
      await ctx.reply(message);
    } else {
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
      await ctx.reply(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Å–µ–Ω (${matchedSongs.length}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Å–Ω–∏:', error);
    try {
      if (animation.messageId) {
        await ctx.telegram.editMessageText(
          animation.chatId, 
          animation.messageId, 
          null, 
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      } else {
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    } catch (e) {
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatSongForDisplay(song) {
  // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
  const lines = song.fullText.split('\n');
  
  // –°—Ç—Ä–æ–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  let formattedText = 'üéµ ';
  let titleFound = false;
  let authorFound = false;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Å–Ω–∏
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º (—Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–º–≤–æ–ª ‚ô≠)
    if (!titleFound && line.includes('‚ô≠')) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ ‚ô≠ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
      formattedText += `–ü–µ—Å–Ω—è: ${line.replace('‚ô≠', '').trim()}\n`;
      titleFound = true;
      continue;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∞–≤—Ç–æ—Ä–æ–º (—Å–ª–µ–¥—É—é—â–∞—è –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
    if (titleFound && !authorFound) {
      const author = line.trim();
      if (author) {
        formattedText += `üë§ : ${author}\n`;
      }
      formattedText += '\n' + '‚îà'.repeat(30) + '\n\n';
      authorFound = true;
      continue;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
    if (titleFound && authorFound) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (–ø—Ä–∏–ø–µ–≤, –∫—É–ø–ª–µ—Ç –∏ —Ç.–¥.)
      const isHeader = 
        line.toLowerCase().includes('–ø—Ä–∏–ø–µ–≤') || 
        line.toLowerCase().includes('–∫—É–ø–ª–µ—Ç') ||
        line.toLowerCase().includes('chorus') ||
        line.toLowerCase().includes('verse') ||
        line.toLowerCase().includes('–±—Ä–∏–¥–∂') ||
        line.toLowerCase().includes('bridge');
      
      if (isHeader) {
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ
        formattedText += `üéº ${line.toUpperCase().trim()} üéº\n`;
      } else if (line.trim()) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ
        const processedLine = highlightChords(line);
        formattedText += processedLine + '\n';
      } else {
        // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        formattedText += '\n';
      }
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ü–µ
  formattedText += '\n' + '‚îà'.repeat(30);
  
  return formattedText;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∞–∫–∫–æ—Ä–¥–æ–≤ –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
function highlightChords(text) {
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫–∫–æ—Ä–¥–æ–≤
  // –ü–æ–∏—Å–∫ —Å–æ—á–µ—Ç–∞–Ω–∏–π –≤–∏–¥–∞ A, Am, C#, Dm7, G/B –∏ —Ç.–¥.
  const chordRegex = /\b([ACDEFG–ùB][#‚ôØ‚ô≠b]?(?:m|min|maj|sus|add|aug|dim)?(?:[2-9]|11|13)?(?:\/[ACDEFG–ùB][#‚ôØ‚ô≠b]?)?)(?=\s|$|\b)/g;
  
  // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã –Ω–∞ —Ç–µ–≥ —Å –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
  return text.replace(chordRegex, '<span style="color: #FF0000;">$1</span>');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Å–µ–Ω –∏–∑ Google Docs
async function getSongs() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const now = Date.now();
    if (cache.songs.length > 0 && cache.lastUpdate && (now - cache.lastUpdate < cache.updateInterval)) {
      return cache.songs;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const document = await getDocumentContent();
    if (!document || !document.body || !document.body.content) {
      console.error('–î–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
      return [];
    }
    
    const songs = [];
    let currentSong = null;
    let nextLineIsAuthor = false;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    for (const element of document.body.content) {
      if (element.paragraph) {
        const text = extractParagraphText(element.paragraph);
        
        if (text.includes('‚ô≠')) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–µ—Å–Ω—é, –µ—Å–ª–∏ –±—ã–ª–∞
          if (currentSong) {
            songs.push(currentSong);
          }
          
          // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–µ—Å–Ω—é
          const cleanTitle = text.replace('‚ô≠', '').trim();
          currentSong = { title: cleanTitle, author: '', fullText: text };
          nextLineIsAuthor = true;
        } 
        else if (currentSong && nextLineIsAuthor) {
          // –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ - –∞–≤—Ç–æ—Ä
          currentSong.author = text.trim();
          currentSong.fullText +=  text;
          nextLineIsAuthor = false;
        }
        else if (currentSong) {
          // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—Å—Ç—É –ø–µ—Å–Ω–∏
          currentSong.fullText += text;
        }
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–µ—Å–Ω—é
    if (currentSong) {
      songs.push(currentSong);
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Å–Ω–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    const filteredSongs = songs.filter(song => song.title && song.title.trim().length > 2);
    
    if (filteredSongs.length > 0) {
      cache.songs = filteredSongs;
      cache.lastUpdate = now;
      return filteredSongs;
    }
    
    return [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Å–µ–Ω:', error);
    // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –µ—Å—Ç—å –ø–µ—Å–Ω–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –¥–∞–∂–µ –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª
    if (cache.songs.length > 0) {
      return cache.songs;
    }
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function getDocumentContent() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ URL
    const documentId = process.env.SONGBOOK_URL.includes('/d/') 
      ? process.env.SONGBOOK_URL.split('/d/')[1].split('/')[0]
      : process.env.SONGBOOK_URL;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const serviceAccount = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    const auth = new google.auth.GoogleAuth({
      credentials: serviceAccount,
      scopes: ['https://www.googleapis.com/auth/documents.readonly']
    });

    const docs = google.docs({ version: 'v1', auth });
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç (—É–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä timeout, –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è API)
    const response = await docs.documents.get({ documentId });
    
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    throw error;
  }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
function extractParagraphText(paragraph) {
  if (!paragraph.elements) return '';
  
  return paragraph.elements
    .map(element => {
      if (element.textRun && element.textRun.content) {
        return element.textRun.content;
      }
      return '';
    })
    .join('');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è Vercel
module.exports = async (req, res) => {
  try {
    // –ï—Å–ª–∏ —ç—Ç–æ GET –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (req.method === 'GET') {
      return res.json({ status: 'OK', timestamp: new Date().toISOString() });
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ POST –∑–∞–ø—Ä–æ—Å, –æ—Ç–∫–ª–æ–Ω—è–µ–º
    if (req.method !== 'POST') {
      return res.status(405).json({ error: 'Method not allowed' });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
    await bot.handleUpdate(req.body);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    return res.status(200).send('OK');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (process.env.NODE_ENV !== 'production') {
  bot.launch()
    .then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));
}
