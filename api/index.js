/**
 * Gosha Bot - Telegram –±–æ—Ç –¥–ª—è –ø–µ—Å–µ–Ω —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏
 */

// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');
const path = require('path');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const MAX_MESSAGE_LENGTH = 4000;

// Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
app.use(express.json());

// –°–æ—Å—Ç–æ—è–Ω–∏—è, –∫–µ—à–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const userStates = new Map();
const userSongCache = new Map();
const docCache = {
  content: null,
  lastUpdate: null,
  updateInterval: 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
};

const stats = {
  songViews: {},
  commandsUsed: {},
  callbacksUsed: {},
  userActivity: {},
  lastReset: Date.now()
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API
const auth = new google.auth.GoogleAuth({
  credentials: JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT),
  scopes: ['https://www.googleapis.com/auth/documents.readonly']
});

const docs = google.docs({ version: 'v1', auth });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
let bot;
if (process.env.NODE_ENV === 'production') {
  // –í –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
  bot = new TelegramBot(process.env.BOT_TOKEN, { polling: false });
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook');
} else {
  // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
  bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, handleStartCommand);
bot.onText(/\/help/, handleHelpCommand);
bot.onText(/\/list/, handleListCommand);
bot.onText(/\/random/, handleRandomCommand);
bot.onText(/\/search(?:\s+(.+))?/, handleSearchCommand);
bot.onText(/\/circlerules/, handleCircleRulesCommand);

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', msg => { if (msg.text && !msg.text.startsWith('/')) handleTextMessage(msg); });

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', handleCallbackQuery);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3333;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
app.post('/api/webhook', (req, res) => {
  if (req.body.message || req.body.callback_query) {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } else {
    res.sendStatus(400);
  }
});

/**
 * –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
 */

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Å–µ–Ω
 */
async function getSongs() {
  try {
    const document = await getDocumentContent();
    const songs = [];
    let currentSong = null;
    let nextLineIsAuthor = false;
    
    for (const element of document.body.content) {
      if (element.paragraph) {
        const text = extractParagraphText(element.paragraph);
        
        if (text.includes('‚ô≠')) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–µ—Å–Ω—é, –µ—Å–ª–∏ –±—ã–ª–∞
          if (currentSong) songs.push(currentSong);
          
          // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–µ—Å–Ω—é
          const cleanTitle = text.replace('‚ô≠', '').trim();
          currentSong = { title: cleanTitle, author: '', fullText: text };
          nextLineIsAuthor = true; // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ—Ä–æ–º
        } 
        else if (currentSong && nextLineIsAuthor) {
          // –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ - –∞–≤—Ç–æ—Ä
          currentSong.author = text.trim();
          currentSong.fullText = currentSong.fullText + text;
          nextLineIsAuthor = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        }
        else if (currentSong) {
          // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—Å—Ç—É –ø–µ—Å–Ω–∏
          currentSong.fullText = currentSong.fullText + text;
        }
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–µ—Å–Ω—é
    if (currentSong) songs.push(currentSong);
    
    return songs.filter(song => song.title && song.title.trim().length > 2);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Å–µ–Ω:', error.message);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
async function getDocumentContent() {
  try {
    const now = Date.now();
    if (docCache.content && docCache.lastUpdate && (now - docCache.lastUpdate < docCache.updateInterval)) {
      return docCache.content;
    }

    const documentId = process.env.SONGBOOK_URL.includes('/d/') 
      ? process.env.SONGBOOK_URL.split('/d/')[1].split('/')[0]
      : process.env.SONGBOOK_URL;
      
    const document = await docs.documents.get({ documentId });
    docCache.content = document.data;
    docCache.lastUpdate = now;
    return document.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error.message);
    throw error;
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
 */
function extractParagraphText(paragraph) {
  let text = '';
  
  if (paragraph.elements) {
    for (const element of paragraph.elements) {
      if (element.textRun && element.textRun.content) {
        text += element.textRun.content;
      }
    }
  }
  
  return text;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞
 */
async function handleSearchCommand(msg, match) {
  const userId = msg.from.id;
  const chatId = msg.chat.id;
  const query = match && match[1] ? match[1].trim() : '';
  
  if (query) {
    await performSearch(msg, query);
  } else {
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏:');
    userStates.set(userId, { waitingFor: 'search' });
  }
  
  updateStats(userId, '/search');
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @param {string} actionText - –¢–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò—â—É –ø–µ—Å–Ω—é")
 * @param {number} [duration=5000] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º—Å
 * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
 */
async function showAnimatedLoading(chatId, actionText, duration = 5000) {
  // –í–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–∏
  const animationSets = {
    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å —ç–º–æ–¥–∑–∏
    progressBar: [
      'üîç ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú 0%',
      'üîç üü¶‚¨ú‚¨ú‚¨ú‚¨ú 20%',
      'üîç üü¶üü¶‚¨ú‚¨ú‚¨ú 40%',
      'üîç üü¶üü¶üü¶‚¨ú‚¨ú 60%',
      'üîç üü¶üü¶üü¶üü¶‚¨ú 80%',
      'üîç üü¶üü¶üü¶üü¶üü¶ 100%'
    ],
    
    // –í—Ä–∞—â–∞—é—â–∏–π—Å—è —Å–ø–∏–Ω–Ω–µ—Ä
    spinner: [
      'üéµ ‚óê –ó–∞–≥—Ä—É–∑–∫–∞...',
      'üéµ ‚óì –ó–∞–≥—Ä—É–∑–∫–∞...',
      'üéµ ‚óë –ó–∞–≥—Ä—É–∑–∫–∞...',
      'üéµ ‚óí –ó–∞–≥—Ä—É–∑–∫–∞...'
    ],
    
    // –ú–∏–≥–∞—é—â–∏–µ –Ω–æ—Ç—ã
    notes: [
      'üéµ ‚ô™ ‚ô™ ‚ô™',
      '‚ô™ üéµ ‚ô™ ‚ô™',
      '‚ô™ ‚ô™ üéµ ‚ô™',
      '‚ô™ ‚ô™ ‚ô™ üéµ'
    ],
  
    // –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    instruments: [
      'üé∏ –ü–æ–∏—Å–∫...',
      'üéπ –ü–æ–∏—Å–∫...',
      'üé§ –ü–æ–∏—Å–∫...',
      'ü•Å –ü–æ–∏—Å–∫...',
      'üéª –ü–æ–∏—Å–∫...',
      'üé∫ –ü–æ–∏—Å–∫...'
    ]
  };
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
  const animationKeys = Object.keys(animationSets);
  const selectedAnimation = animationSets[animationKeys[Math.floor(Math.random() * animationKeys.length)]];
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = await bot.sendMessage(
    chatId, 
    `${selectedAnimation[0]} ${actionText}...`
  );
  
  let currentFrame = 0;
  const startTime = Date.now();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const intervalId = setInterval(async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏ –º—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (Date.now() - startTime >= duration) {
      clearInterval(intervalId);
      return;
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞
    currentFrame = (currentFrame + 1) % selectedAnimation.length;
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.editMessageText(
        `${selectedAnimation[currentFrame]} ${actionText}...`,
        {
          chat_id: chatId,
          message_id: message.message_id
        }
      );
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏:', error.message);
      clearInterval(intervalId);
    }
  }, 400);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
  return {
    message,
    stop: () => {
      clearInterval(intervalId);
    }
  };
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
 * @param {number} chatId - ID —á–∞—Ç–∞
 * @returns {Promise<void>}
 */
async function showWelcomeAnimation(chatId) {
  const welcomeFrames = [
    'üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω.',
    'üé∏ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω..',
    'üéº –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω...',
    'üé§ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω....',
    'üéß –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω.....',
    'üéπ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω......'
  ];
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = await bot.sendMessage(chatId, welcomeFrames[0]);
  
  // –ê–Ω–∏–º–∏—Ä—É–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥
  for (let i = 1; i < welcomeFrames.length; i++) {
    await new Promise(resolve => setTimeout(resolve, 300));
    try {
      await bot.editMessageText(welcomeFrames[i], {
        chat_id: chatId,
        message_id: message.message_id
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error.message);
      break;
    }
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
  await new Promise(resolve => setTimeout(resolve, 500));
  
  const commandsList = 
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/search - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–∫—Å—Ç—É\n' +
    '/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω\n' +
    '/random - —Å–ª—É—á–∞–π–Ω–∞—è –ø–µ—Å–Ω—è\n' +
    '/circlerules - –ø—Ä–∞–≤–∏–ª–∞ –∫—Ä—É–≥–∞\n' +
    '/help - —Å–ø—Ä–∞–≤–∫–∞';
  
  try {
    await bot.editMessageText('üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω.\n\n' + commandsList, {
      chat_id: chatId,
      message_id: message.message_id
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error.message);
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–µ—Å–µ–Ω
 */
async function performSearch(msg, query) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingAnimation = await showAnimatedLoading(chatId, '–ò—â—É –ø–µ—Å–Ω—é');
    
    const songs = await getSongs();
    const results = filterSongs(songs, query);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    loadingAnimation.stop();
    
    if (results.length === 0) {
      await bot.editMessageText('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.', {
        chat_id: chatId,
        message_id: loadingAnimation.message.message_id
      });
      return;
    }
    
    if (results.length === 1) {
      const song = results[0];
      
      await bot.deleteMessage(chatId, loadingAnimation.message.message_id);
      await sendSong(chatId, song.title, song.author, song.fullText);
      
      userStates.set(userId, { lastSongTitle: song.title });
      return;
    }
    
    // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    const maxResults = Math.min(results.length, 15);
    const songsToShow = results.slice(0, maxResults);
    
    await bot.editMessageText(
      `–ù–∞–π–¥–µ–Ω–æ ${results.length} –ø–µ—Å–µ–Ω${maxResults < results.length ? ' (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ ' + maxResults + ')' : ''}. –í—ã–±–µ—Ä–∏—Ç–µ:`, 
      {
        chat_id: chatId,
        message_id: loadingAnimation.message.message_id,
        reply_markup: {
          inline_keyboard: songsToShow.map((song, index) => [{
            text: `${song.title}${song.author ? ' - ' + song.author.substring(0, 30) : ''}`,
            callback_data: `song_${index}`
          }])
        }
      }
    );
    
    userSongCache.set(userId, songsToShow);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–µ—Å–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É
 */
function filterSongs(songs, query) {
  const normalizedQuery = query.toLowerCase().trim();
  
  return songs.filter(song => 
    song.title.toLowerCase().includes(normalizedQuery) || 
    song.fullText.toLowerCase().includes(normalizedQuery) ||
    (song.author && song.author.toLowerCase().includes(normalizedQuery))
  );
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Å–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendSong(chatId, title, author, text) {
  try {
    const formattedText = formatSongForDisplay(title, author, text);
    await sendLongMessage(chatId, formattedText);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫–∫–æ—Ä–¥–Ω–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Å–Ω–∏
    const songbookUrl = process.env.SONGBOOK_URL || 'https://docs.google.com/document/d/1UPg7HOeYbU-MxG_NlM-w5h-ReLpaaZSNg_cB_KUPaqM/edit';
    await bot.sendMessage(chatId, `<a href="${songbookUrl}">–û—Ç–∫—Ä—ã—Ç—å –∞–∫–∫–æ—Ä–¥–Ω–∏–∫</a>`, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Å–Ω–∏:', error.message);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Å–Ω–∏.');
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function formatSongForDisplay(title, author, text) {
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ
  const escapeHtml = (unsafe) => {
    if (!unsafe) return '';
    return unsafe
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  };
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  let result = `üéµ <b>${escapeHtml(title)}</b>`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (author && author.trim()) {
    result += `\nüé∏ <i>${escapeHtml(author)}</i>`;
  }
  
  // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
  const lines = text.split('\n');
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∞–≤—Ç–æ—Ä)
  let startIndex = 0;
  if (lines.length > 0 && lines[0].includes('‚ô≠')) {
    startIndex++;
    // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –∞–≤—Ç–æ—Ä
    if (lines.length > 1) {
      startIndex++;
    }
  }
  
  // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (—Ä–∏—Ç–º–∏–∫–∞, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –≥—Ä—É–ø–ø–∞)
  let metadataFound = false;
  let metadataLines = [];
  
  // –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  for (let i = startIndex; i < Math.min(startIndex + 10, lines.length); i++) {
    const line = lines[i].trim();
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    if (line.includes('–†–∏—Ç–º–∏–∫–∞:') || line.includes('–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å:') || line.includes('–ì—Ä—É–ø–ø–∞:')) {
      metadataLines.push(i);
      metadataFound = true;
    } else if (metadataFound && line === '') {
      // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
      break;
    } else if (metadataFound) {
      // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      metadataLines.push(i);
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ö –∫—Ä–∞—Å–∏–≤–æ
  if (metadataFound && metadataLines.length > 0) {
    result += '\n\n<pre>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê';
    
    for (const lineIndex of metadataLines) {
      const line = lines[lineIndex].trim();
      
      if (line) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if (line.includes(':')) {
          const [key, value] = line.split(':').map(part => part.trim());
          result += `\n‚îÇ <b>${escapeHtml(key)}</b>: ${escapeHtml(value || '-')}`;
        } else {
          result += `\n‚îÇ ${escapeHtml(line)}`;
        }
      }
    }
    
    result += '\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</pre>';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏, –ø—Ä–æ–ø—É—Å–∫–∞—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    startIndex = Math.max(...metadataLines) + 1;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    while (startIndex < lines.length && lines[startIndex].trim() === '') {
      startIndex++;
    }
  } else {
    // –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    result += '\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
  let inChordSection = false;
  
  for (let i = startIndex; i < lines.length; i++) {
    const line = lines[i];
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞
    if (i === startIndex && line.trim() === '') {
      continue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∞–∫–∫–æ—Ä–¥–∞–º–∏
    const isChordLine = /^[A-G][#b]?(m|maj|dim|aug|sus|add)?[0-9]?(\s+[A-G][#b]?(m|maj|dim|aug|sus|add)?[0-9]?)*$/.test(line.trim());
    
    if (isChordLine) {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–∫–∫–æ—Ä–¥—ã –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
      result += '\n<code>' + escapeHtml(line) + '</code>';
      inChordSection = true;
    } else if (line.trim() === '') {
      // –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      result += '\n' + escapeHtml(line);
      inChordSection = false;
    } else {
      // –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
      if (inChordSection) {
        // –¢–µ–∫—Å—Ç –ø–æ–¥ –∞–∫–∫–æ—Ä–¥–∞–º–∏ - –æ–±—ã—á–Ω—ã–π
        result += '\n' + escapeHtml(line);
      } else if (line.toLowerCase().trim().startsWith('–ø—Ä–∏–ø–µ–≤') || 
                line.toLowerCase().trim().startsWith('chorus')) {
        // –í—ã–¥–µ–ª—è–µ–º –ø—Ä–∏–ø–µ–≤
        result += '\n<b>üîÑ ' + escapeHtml(line) + '</b>';
      } else if (/^\d+\./.test(line.trim())) {
        // –í—ã–¥–µ–ª—è–µ–º –∫—É–ø–ª–µ—Ç—ã (—Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏)
        result += '\n<b>' + escapeHtml(line) + '</b>';
      } else {
        // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        result += '\n' + escapeHtml(line);
      }
      inChordSection = false;
    }
  }
  
  return result;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º
 */
async function sendLongMessage(chatId, text) {
  try {
    const maxLength = MAX_MESSAGE_LENGTH - 300;
    
    // –ï—Å–ª–∏ —É–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª–∏–∫–æ–º
    if (text.length <= maxLength) {
      await bot.sendMessage(chatId, text, { parse_mode: 'HTML' });
      return;
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = text.split('\n');
    let currentPart = '';
    
    // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    let titleLine = '';
    let authorLine = '';
    
    if (lines.length > 0 && lines[0].includes('<b>')) {
      titleLine = lines[0];
      if (lines.length > 1 && lines[1].includes('<i>')) {
        authorLine = lines[1];
      }
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∞–≤—Ç–æ—Ä
    let headerText = titleLine;
    if (authorLine) {
      headerText = titleLine + '\n' + authorLine;
    }
    currentPart = headerText;
    
    // –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    let startIndex = headerText === titleLine ? 1 : 2;
    
    // –°–æ–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
    for (let i = startIndex; i < lines.length; i++) {
      const line = lines[i];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å —É—á–µ—Ç–æ–º —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
      if (currentPart.length + line.length + 1 > maxLength) {
        if (currentPart.trim()) {
          await bot.sendMessage(chatId, currentPart, { parse_mode: 'HTML' });
        }
        
        // –ù–æ–≤–∞—è —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        const cleanTitleText = titleLine.replace(/<b>|<\/b>/g, '').trim();
        currentPart = `<b>[–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ]</b> ${cleanTitleText}`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
      if (currentPart.length > 0) {
        currentPart += '\n';
      }
      currentPart += line;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if (currentPart.trim()) {
      await bot.sendMessage(chatId, currentPart, { parse_mode: 'HTML' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    throw error;
  }
}

/**
 * –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
 */

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help
 */
async function handleStartCommand(msg) {
  const userId = msg.from.id;
  
  await showWelcomeAnimation(msg.chat.id);
  updateStats(userId, '/start');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help (–∞–ª–∏–∞—Å –¥–ª—è /start)
 */
async function handleHelpCommand(msg) {
  handleStartCommand(msg);
  updateStats(msg.from.id, '/help');
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–µ—Å–µ–Ω
 */
async function handleListCommand(msg) {
  const userId = msg.from.id;
  const chatId = msg.chat.id;
  
  try {
    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const loadingAnimation = await showAnimatedLoading(chatId, '–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω
    const songs = await getSongs();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    loadingAnimation.stop();
    try {
      await bot.deleteMessage(chatId, loadingAnimation.message.message_id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Å–Ω–∏
    const uniqueSongs = new Map();
    
    for (const song of songs) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∏–ª–∏ –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      if (!song.title || song.title.trim().length < 3) {
        continue;
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const normalizedTitle = song.title.toLowerCase().trim();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Å–Ω—é
      uniqueSongs.set(normalizedTitle, song);
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const filteredSongs = Array.from(uniqueSongs.values());
    filteredSongs.sort((a, b) => a.title.localeCompare(b.title, 'ru'));
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –≤ –∞–∫–∫–æ—Ä–¥–Ω–∏–∫–µ (${filteredSongs.length}):`;
    
    for (let i = 0; i < filteredSongs.length; i++) {
      const songNumber = i + 1;
      const song = filteredSongs[i];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–µ—Å–Ω–µ–π
      message += '\n' + `${songNumber}. ${song.title}`;
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (message.length > MAX_MESSAGE_LENGTH - 200 && i < filteredSongs.length - 1) {
        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        message = '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω:';
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (message.length > 0) {
      await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    updateStats(userId, '/list');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω:', error.message);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Å–Ω–∏
 */
async function handleRandomCommand(msg) {
  const userId = msg.from.id;
  const chatId = msg.chat.id;
  
  try {
    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const loadingAnimation = await showAnimatedLoading(chatId, '–í—ã–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω
    const songs = await getSongs();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    loadingAnimation.stop();
    try {
      await bot.deleteMessage(chatId, loadingAnimation.message.message_id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Å–Ω–∏
    const validSongs = songs.filter(song => 
      song.title && song.title.trim().length > 2
    );
    
    if (validSongs.length === 0) {
      await bot.sendMessage(chatId, '–ü–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–Ω—é
    const randomSong = validSongs[Math.floor(Math.random() * validSongs.length)];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    userStates.set(userId, { lastSongTitle: randomSong.title });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é
    await sendSong(chatId, randomSong.title, randomSong.author, randomSong.fullText);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    updateStats(userId, '/random');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Å–Ω–∏:', error.message);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function handleTextMessage(msg) {
  const userId = msg.from.id;
  const text = msg.text.trim();
  const state = userStates.get(userId);
  
  if (state && state.waitingFor === 'search') {
    userStates.set(userId, {});
    await performSearch(msg, text);
  } else {
    await performSearch(msg, text);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
 */
async function handleCallbackQuery(callback) {
  const userId = callback.from.id;
  const data = callback.data;
  const chatId = callback.message.chat.id;
  
  if (data.startsWith('song_')) {
    const songIndex = parseInt(data.split('_')[1], 10);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Å–Ω—é –∏–∑ –∫—ç—à–∞
      const userSongs = userSongCache.get(userId);
      
      if (!userSongs || !userSongs[songIndex]) {
        await bot.answerCallbackQuery(callback.id, {
          text: '–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.',
          show_alert: true
        });
        return;
      }
      
      const song = userSongs[songIndex];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–µ—Å–Ω—é –≤ –∏—Å—Ç–æ—Ä–∏–∏
      userStates.set(userId, { lastSongTitle: song.title });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Å–Ω—é
      await sendSong(chatId, song.title, song.author, song.fullText);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
      await bot.deleteMessage(chatId, callback.message.message_id);
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
      await bot.answerCallbackQuery(callback.id);
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      updateStats(userId, 'callback');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Å–Ω–∏:', error.message);
      await bot.answerCallbackQuery(callback.id, {
        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        show_alert: true
      });
    }
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function updateStats(userId, command) {
  stats.commandsUsed[command] = (stats.commandsUsed[command] || 0) + 1;
  stats.userActivity[userId] = (stats.userActivity[userId] || 0) + 1;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /circlerules - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∫—Ä—É–≥–∞
 */
async function handleCircleRulesCommand(msg) {
  const userId = msg.from.id;
  const chatId = msg.chat.id;
  
  try {
    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const loadingAnimation = await showAnimatedLoading(chatId, '–ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–∞–≤–∏–ª–∞ –∫—Ä—É–≥–∞');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    const document = await getDocumentContent();
    let rules = '';
    let foundRules = false;
    let isFirstLine = true;
    
    // –ò—â–µ–º —Ç–µ–∫—Å—Ç –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ ‚ô≠
    for (const element of document.body.content) {
      if (element.paragraph) {
        const text = extractParagraphText(element.paragraph);
        
        if (text.includes('‚ô≠')) {
          // –î–æ—Å—Ç–∏–≥–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
          foundRules = true;
          break;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –ø—Ä–∞–≤–∏–ª–∞–º –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        const trimmedText = text.trim();
        if (trimmedText) {
          if (isFirstLine) {
            rules += trimmedText;
            isFirstLine = false;
          } else {
            rules += '\n' + trimmedText;
          }
        }
      }
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    loadingAnimation.stop();
    try {
      await bot.deleteMessage(chatId, loadingAnimation.message.message_id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
    
    if (!foundRules || rules.trim().length === 0) {
      await bot.sendMessage(chatId, '–ü—Ä–∞–≤–∏–ª–∞ –∫—Ä—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.');
      return;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
    const formattedRules = '<b>–ü—Ä–∞–≤–∏–ª–∞ –∫—Ä—É–≥–∞</b>\n\n' + rules;
    await sendLongMessage(chatId, formattedRules);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    updateStats(userId, '/circlerules');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∫—Ä—É–≥–∞:', error.message);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
module.exports = { bot, app };

