// Vercel serverless function for Telegram Bot
const axios = require('axios');

// Bot configuration
const apiToken = "7746110687:AAElvNykURie6fU1kBiFGZ_c4co75n9qgRs";
const apiUrl = `https://api.telegram.org/bot${apiToken}`;

// Function to send message to Telegram
const sendMessage = async (chatId, text, keyboard = null) => {
  try {
    const data = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    };

    if (keyboard) {
      data.reply_markup = JSON.stringify(keyboard);
    }

    const response = await axios.post(`${apiUrl}/sendMessage`, data);
    return response.data;
  } catch (error) {
    console.error('Error sending message:', error);
    return { ok: false, error: error.message };
  }
};

// Simple response handler
const handleCommand = async (command, chatId) => {
  switch (command) {
    case '/start':
      return sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ì–æ—à–∞ –¥–µ–º–æ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥, –Ω–∞–ø–∏—à–∏—Ç–µ /help');
    case '/help':
      return sendMessage(chatId, `
–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/ping_gosha - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏

–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞ Vercel. –°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.`);
    case '/ping_gosha':
      return sendMessage(chatId, '–ì–æ—à–∞ –¥–µ–º–æ –Ω–∞ —Å–≤—è–∑–∏! üé∏');
    case '/about':
      return sendMessage(chatId, '–ì–æ—à–∞ –î–µ–º–æ - —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è Telegram, —Ä–∞–∑–º–µ—â–µ–Ω–Ω–∞—è –Ω–∞ Vercel. –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∞ @Hleb66613.');
    case '/menu':
      const keyboard = {
        inline_keyboard: [
          [
            { text: "–ü–µ—Å–Ω–∏", callback_data: "songs" },
            { text: "–ê–Ω–µ–∫–¥–æ—Ç—ã", callback_data: "jokes" }
          ],
          [
            { text: "–û –±–æ—Ç–µ", callback_data: "about" }
          ]
        ]
      };
      return sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', keyboard);
    default:
      return sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
  }
};

// Handler for incoming updates
module.exports = async (req, res) => {
  // Only accept POST requests
  if (req.method !== 'POST') {
    return res.status(200).json({ ok: true, message: 'Telegram bot webhook is active' });
  }

  try {
    const update = req.body;
    console.log('Received update:', JSON.stringify(update));
    
    // Process message
    if (update && update.message) {
      const chatId = update.message.chat.id;
      const text = update.message.text || '';
      
      // Handle commands
      if (text.startsWith('/')) {
        const command = text.split('@')[0]; // Remove bot username from command
        await handleCommand(command, chatId);
      } else {
        // Handle regular messages
        await sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞ —á—Ç–æ —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
      }
    } else if (update && update.callback_query) {
      // Handle callback queries (button clicks)
      const callbackQuery = update.callback_query;
      const chatId = callbackQuery.message.chat.id;
      const data = callbackQuery.data;
      
      switch (data) {
        case 'songs':
          await sendMessage(chatId, '–§—É–Ω–∫—Ü–∏—è —Å –ø–µ—Å–Ω—è–º–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!');
          break;
        case 'jokes':
          await sendMessage(chatId, '–§—É–Ω–∫—Ü–∏—è —Å –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!');
          break;
        case 'about':
          await sendMessage(chatId, '–ì–æ—à–∞ –î–µ–º–æ - —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è Telegram, —Ä–∞–∑–º–µ—â–µ–Ω–Ω–∞—è –Ω–∞ Vercel. –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∞ @Hleb66613.');
          break;
        default:
          await sendMessage(chatId, `–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: ${data}. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.`);
      }
    }

    // Return success
    return res.status(200).json({ ok: true });
  } catch (error) {
    console.error('Error handling update:', error);
    return res.status(500).json({ ok: false, error: error.message });
  }
}; 