// Vercel serverless function for Telegram Bot
const axios = require('axios');

// Bot configuration
const apiToken = "6250412206:AAElvNykURie6fU1kBiFGZ_c4co75n9qgRs";
const apiUrl = `https://api.telegram.org/bot${apiToken}`;

// Function to send message to Telegram
const sendMessage = async (chatId, text, keyboard = null) => {
  try {
    const data = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    };

    if (keyboard) {
      data.reply_markup = JSON.stringify(keyboard);
    }

    const response = await axios.post(`${apiUrl}/sendMessage`, data);
    return response.data;
  } catch (error) {
    console.error('Error sending message:', error);
    return { ok: false, error: error.message };
  }
};

// Simple response handler
const handleCommand = async (command, chatId) => {
  switch (command) {
    case '/start':
      return sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ì–æ—à–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥, –Ω–∞–ø–∏—à–∏—Ç–µ /help');
    case '/help':
      return sendMessage(chatId, `
–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/ping_gosha - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç

–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞ Vercel. –°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.`);
    case '/ping_gosha':
      return sendMessage(chatId, '–ì–æ—à–∞ –Ω–∞ —Å–≤—è–∑–∏! üé∏');
    default:
      return sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
  }
};

// Handler for incoming updates
module.exports = async (req, res) => {
  // Only accept POST requests
  if (req.method !== 'POST') {
    return res.status(200).json({ ok: true, message: 'Telegram bot webhook is active' });
  }

  try {
    const update = req.body;
    
    // Process message
    if (update && update.message) {
      const chatId = update.message.chat.id;
      const text = update.message.text || '';
      
      // Handle commands
      if (text.startsWith('/')) {
        const command = text.split('@')[0]; // Remove bot username from command
        await handleCommand(command, chatId);
      } else {
        // Handle regular messages
        await sendMessage(chatId, '–°–∫–æ—Ä–æ —è —Å–º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /help');
      }
    }

    // Return success
    return res.status(200).json({ ok: true });
  } catch (error) {
    console.error('Error handling update:', error);
    return res.status(500).json({ ok: false, error: error.message });
  }
}; 